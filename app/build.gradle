apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
  compileSdkVersion 28
  defaultConfig {
    applicationId "com.sazib.pinboard"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 100
    versionName "1.0.0"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    vectorDrawables.useSupportLibrary = true

    def date = new Date()
    def formattedDate = date.format('dd-MMM-yyyy h mm a')
    def apkName = extAppName + ' - (' + applicationId + ') ' + 'V-' + defaultConfig.versionName +
            ' - ' + formattedDate + ' '
    setProperty("archivesBaseName", "$apkName")

    multiDexEnabled true
  }
  buildTypes {
    debug {
      buildConfigField("String", "BASE_URL", "\"http://api.openweathermap.org\"")
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      buildConfigField("String", "BASE_URL", "\"http://api.openweathermap.org\"")
    }
  }

  aaptOptions {
    cruncherEnabled = false
  }
  splits {
    abi {
      // Enable ABI split
      enable true

      // Clear list of ABIs
      reset()

      // Specify each architecture currently supported by the Voice SDK
      include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"

      // Specify that we do not want an additional universal SDK
      universalApk false
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildToolsVersion '28.0.3'
}

dependencies {


  implementation fileTree(include: ['*.jar'], dir: 'libs')

  // kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

  // android support libraries
  implementation 'androidx.appcompat:appcompat:1.1.0-rc01'
  implementation 'androidx.fragment:fragment:1.2.0-alpha01'
  implementation 'androidx.recyclerview:recyclerview:1.1.0-beta01'
  implementation 'androidx.cardview:cardview:1.0.0'
  implementation 'androidx.viewpager:viewpager:1.0.0'
  implementation 'androidx.vectordrawable:vectordrawable:1.1.0-rc01'
  implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0-rc01'
  implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta2'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'androidx.preference:preference:1.1.0-rc01'
  implementation 'com.google.android.material:material:1.1.0-alpha09'

  // multi-dex
  implementation "androidx.multidex:multidex:$rootProject.multidex"

  // google
  implementation 'com.google.firebase:firebase-core:17.0.1'
  implementation 'com.google.firebase:firebase-messaging:19.0.1'
  implementation 'com.google.firebase:firebase-iid:19.0.1'
  implementation 'android.arch.work:work-runtime:1.0.1'
  implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

  // network
  implementation "com.amitshekhar.android:rx2-android-networking:$rootProject.rx2androidnetworking"

  // reactive
  implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjava"
  implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroid"

  // dependency injection
  implementation "com.google.dagger:dagger-android:$rootProject.dagger"
  implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
  kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"
  kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"

  // ste-tho
  implementation "com.facebook.stetho:stetho:$rootProject.stetho"
  implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.stetho"

  // parser
  implementation "com.google.code.gson:gson:$rootProject.gson"

  // font
  implementation "io.github.inflationx:calligraphy3:$rootProject.calligraphy3"
  implementation "io.github.inflationx:viewpump:$rootProject.viewpump"

  // image
  implementation "com.github.bumptech.glide:glide:$rootProject.glide"
  kapt "com.github.bumptech.glide:compiler:$rootProject.glide"

  // logger
  implementation "com.jakewharton.timber:timber:$rootProject.timber"


  // rx-permissions
  implementation "com.github.tbruyelle:rxpermissions:$rootProject.rxpermissions"

  // androidx room database
  implementation "androidx.room:room-rxjava2:$room"
  kapt "androidx.room:room-compiler:$room"

  // Android Debug Database
  debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'



  // android kotlin extension
  implementation "androidx.core:core-ktx:$rootProject.ktx"

  // dependencies for local unit tests
  testImplementation "junit:junit:$rootProject.ext.junit"
  testImplementation "org.mockito:mockito-core:$rootProject.mockito"

  // ui testing
  androidTestImplementation 'androidx.test:core:1.2.1-alpha02'

  // junit rules
  androidTestImplementation 'androidx.test:runner:1.3.0-alpha02'
  androidTestImplementation 'androidx.test:rules:1.3.0-alpha02'

  // assertions
  androidTestImplementation 'androidx.test.ext:junit:1.1.2-alpha02'

  // espresso dependencies
  androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espresso"
  androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espresso"
  androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espresso"
  androidTestImplementation "androidx.test.espresso:espresso-accessibility:$rootProject.espresso"
  androidTestImplementation "androidx.test.espresso:espresso-web:$rootProject.espresso"
  androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$rootProject.espresso"
  androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$rootProject.espresso"
}
